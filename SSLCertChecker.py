__author__ = "Fedorov Sergei"
__license__ = "GPL"
__version__ = "0.0.1"
__maintainer__ = "Fedorov Sergei"
__email__ = "8ergo@mail.ru"
__status__ = "Production"

import datetime
from requests.packages.urllib3.contrib import pyopenssl as reqs
import requests


DEBUG = False # –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤—ã–≤–æ–¥ –∏–Ω—Ñ—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
ENABLE_ALERTS_TO_TG = True # –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ TG
BOT_TOKEN = '' # Token –±–æ—Ç–∞
BOT_CHAT_ID = '' # ID —á–∞—Ç–∞ –≤ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
PATH_TO_HOST_FILE = './host_list.txt' # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–ø–∏—Å–∫–∞ –¥–æ–º–µ–Ω–Ω—ã—Ö –∏–º–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
DAYS_BEFORE_ALERT = 30 # –ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω–∞—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞


def alert_to_tg(msg_text):
    '''Send message in TG'''
    tg_result = requests.post(
        url=f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage",
        data={'chat_id': BOT_CHAT_ID, 'text': msg_text}
    )
    return tg_result.json()


def check_cert(cert, host_for_check):
    '''Check date in cert and now'''
    check_result = None
    current_date = datetime.datetime.now()
    expiration_date = datetime.datetime.strptime(
        cert.get_notAfter().decode("utf-8"),
        '%Y%m%d%H%M%SZ'
        )
    begin_date = datetime.datetime.strptime(
        cert.get_notBefore().decode("utf-8"),
        '%Y%m%d%H%M%SZ'
        )
    betwin = expiration_date - current_date
    if DEBUG:
        print(f"Date begin: {begin_date}")
        print(f"Date end: {expiration_date}")
        print(f"Days before end: {betwin}")
    if current_date < begin_date:
        check_result = f"‚ÄºÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ ‚ÄºÔ∏è\n‚ö†Ô∏è–î–ª—è {host_for_check} —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è.\nüìÖ–ù–∞—á–∞–ª–æ {str(begin_date)}."
    elif betwin.days <= DAYS_BEFORE_ALERT:
        check_result = f"‚ÄºÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ ‚ÄºÔ∏è\n‚ö†Ô∏è–î–ª—è {host_for_check} —Å–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞.\nüìÖ–û—Å—Ç–∞–ª–æ—Å—å {str(betwin.days)} –¥–Ω–µ–π."
    elif current_date >= expiration_date:
        check_result = f"‚ÄºÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ ‚ÄºÔ∏è\n‚ö†Ô∏è–î–ª—è {host_for_check} {str(expiration_date)} –∑–∞–∫–æ–Ω—á–∏–ª—Å—è —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞."
    else:
        check_result = "ok"
    return check_result


def get_cert(host_for_check, port_for_check=443):
    '''Get cert for host'''
    try:
        cert = reqs.OpenSSL.crypto.load_certificate(
            reqs.OpenSSL.crypto.FILETYPE_PEM,
            reqs.ssl.get_server_certificate((host_for_check, port_for_check))
            )
        return cert
    except Exception as ex:
        print(ex)
        return None


with open(PATH_TO_HOST_FILE, 'r', encoding='UTF-8') as host_file:
    for line in host_file.readlines():
        print('='*10)
        host_cert = None
        result = None
        host_port = line.rstrip('\n').split(':')
        host = host_port[0]
        if len(host_port) > 1:
            port = host_port[1]
        else:
            port = 443
        print(f"{host}:{port}")
        host_cert = get_cert(host, port)
        if host_cert is None:
            continue
        result = check_cert(host_cert, host)
        print(result)
        if result != 'ok' and ENABLE_ALERTS_TO_TG:
            response = alert_to_tg(result)
            if DEBUG:
                print(response)
            if response['ok']:
                print('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –¢–ì')
            else:
                print('–ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
